pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        PATH = "${env.PATH}:/var/lib/jenkins/bin" // Add Docker Scout binary path
    }
    stages {
        stage ("clean workspace") {
            steps {
                cleanWs()
            }
        }
        stage ("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/imrans297/DevOps-Project-Zomato-Kastro.git'
            }
        }
        stage("Sonarqube Analysis"){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=zomato \
                    -Dsonar.projectKey=zomato '''
                }
            }
        }
        // stage("Code Quality Gate"){
        //   steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token' 
        //         }
        //     } 
        // }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
    }
}
        stage ("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage ("Build Docker Image") {
            steps {
                sh "docker build -t zomato ."
            }
        }
        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag zomato imrans297/zomato:latest "
                        sh "docker push imrans297/zomato:latest "
                    }
                }
            }
        }
        stage('Docker Scout Image') {
            steps {
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                    sh '''
                    export DOCKER_SCOUT_CACHE_DIR=/var/lib/jenkins/tmp/docker-scout-cache
                    curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b ~/bin
                    /var/lib/jenkins/bin/docker-scout quickview imrans297/zomato:latest
                    /var/lib/jenkins/bin/docker-scout cves imrans297/zomato:latest
                    /var/lib/jenkins/bin/docker-scout recommendations imrans297/zomato:latest
                    '''   
                   }
                }
            }
        }
        stage ("Deploy to Container") {
            steps {
                // Ensure the container is removed (even if it's stopped or running)
            sh '''
                # Check if a container with the name 'zomato' exists and is running or stopped
                existing_container=$(docker ps -aq -f name=zomato)
                
                if [ "$existing_container" ]; then
                    echo "Stopping and removing existing container..."
                    docker stop zomato || true
                    docker rm zomato || true
                fi
                
                # Start the new container
                echo "Starting new container..."
                docker run -d --name zomato -p 3000:3000 imrans297/zomato:latest
            '''
            }
        }
    }
    // post {
    //     always {
    //         script {
    //             // Check if 'trivy.txt' exists before sending email
    //             if (fileExists('trivy.txt')) {
    //                 try {
    //                     emailext(
    //                         attachLog: true,
    //                         subject: "'${currentBuild.result}'",
    //                         body: """
    //                             <html>
    //                             <body>
    //                                 <div style="background-color: #FFA07A; padding: 10px; margin-bottom: 10px;">
    //                                     <p style="color: white; font-weight: bold;">Project: ${env.JOB_NAME}</p>
    //                                 </div>
    //                                 <div style="background-color: #90EE90; padding: 10px; margin-bottom: 10px;">
    //                                     <p style="color: white; font-weight: bold;">Build Number: ${env.BUILD_NUMBER}</p>
    //                                 </div>
    //                                 <div style="background-color: #87CEEB; padding: 10px; margin-bottom: 10px;">
    //                                     <p style="color: white; font-weight: bold;">URL: ${env.BUILD_URL}</p>
    //                                 </div>
    //                             </body>
    //                             </html>
    //                         """,
    //                         to: 'devimrans297@gmail.com',
    //                         mimeType: 'text/html',
    //                         attachmentsPattern: 'trivy.txt'
    //                     )
    //                 } catch (Exception e) {
    //                     echo "Error sending email: ${e.getMessage()}"
    //                 }
    //             } else {
    //                 echo "trivy.txt not found, skipping email attachment."
    //             }
            }
        }
    }
}